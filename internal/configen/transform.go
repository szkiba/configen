// MIT License
//
// Copyright (c) 2021 Iv√°n Szkiba
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package configen

import (
	"fmt"
)

func transform(data []byte, inFormat string) ([]byte, string, error) {
	parser, ok := parsers[inFormat]
	if !ok {
		return data, inFormat, nil
	}

	v := Context{}

	if err := parser(data, &v); err != nil {
		return nil, "", err
	}

	outFormat, ok := v.get(propFormat)
	if !ok {
		return data, inFormat, nil
	}

	delete(v, propFormat)

	schema, ok := v.get(propSchema)
	if ok && outFormat != "json" {
		delete(v, propSchema)
	}

	b, err := v.marshal(outFormat)
	if err != nil {
		return nil, "", err
	}

	if fn, ok := headerFuncs[outFormat]; ok {
		b = fn(b, schema)
	}

	return b, outFormat, nil
}

type headerFunc func([]byte, string) []byte

func headerYAML(data []byte, schema string) []byte {
	first := []byte(headerLine)
	second := []byte{}

	if schema != "" {
		second = []byte(fmt.Sprintf("# yaml-language-server: $schema=%s\n", schema))
	}

	buff := make([]byte, len(data)+len(first)+len(second))
	copy(buff, first)
	copy(buff[len(first):], second)
	copy(buff[len(first)+len(second):], data)

	return buff
}

func headerTOML(data []byte, _ string) []byte {
	line := []byte(headerLine)
	buff := make([]byte, len(data)+len(line))
	copy(buff, line)
	copy(buff[len(line):], data)

	return buff
}

const headerLine = "# File generated by configen; DO NOT EDIT.\n"

var headerFuncs = map[string]headerFunc{
	"yaml": headerYAML,
	"yml":  headerYAML,
	"toml": headerTOML,
}
