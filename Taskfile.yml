# MIT License
#
# Copyright (c) 2021 IvÃ¡n Szkiba
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

version: "3"

silent: true
output: group

env:
  CGO_ENABLED: "0"

tasks:
  setup:
    desc: "Install dependencies"
    cmds:
      - go mod download
      - go mod tidy
      - go mod verify
      - task: -tools
      - addlicense -f LICENSE . cmd
      - mkdir -p dist

  -tools: |
    if test -f tools/tools.go; then
      cd tools
      go get $(go list -f '{''{join .Imports " "}}' -tags tools)
      go mod tidy
    fi

  generate:
    desc: Generate sources
    cmds:
      - go generate ./...

  lint:
    desc: Run linters
    cmds:
      - golangci-lint run
      - task: "-goreportcard"

  -goreportcard: |
    if which goreportcard-cli > /dev/null; then
      goreportcard-cli -v
    fi

  test:
    desc: Run tests
    cmds:
      - go test ./... -coverprofile=coverage.out
      - if ! goverreport -packages; then echo "Coverage is below the threshold" >&2; false; fi

  cover:
    desc: Genereate coverage report
    cmds:
      - go build -ldflags "-s -w" ./...
      - go test ./... -coverprofile=coverage.out
      - go tool cover -html=coverage.out

  build:
    desc: Build artifact
    cmds:
      - goreleaser  build --snapshot --rm-dist

  clean:
    desc: Clean working directory
    cmds:
      - rm -rf dist coverage.txt coverage.out

  get:
    cmds:
      - which "{{.CMD}}" >/dev/null || go get "{{.URL}}"

  run:
    desc: Execute binary
    cmds:
      - go run ./cmd/configen/*.go {{.CLI_ARGS}}

  ci:
    desc: Run Continuous Integration build
    cmds:
      - task: setup
      - task: generate
      - task: lint
      - task: build
      - task: test

  default:
    desc: Run local build
    cmds:
      - task: ci
